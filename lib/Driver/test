import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:http/http.dart' as http;
import 'package:latlong2/latlong.dart';

class RideAcceptedPage extends StatefulWidget {
  final LatLng driverLocation;
  final LatLng userLocation;

  RideAcceptedPage({
    required this.driverLocation,
    required this.userLocation,
  });

  @override
  _RideAcceptedPageState createState() => _RideAcceptedPageState();
}

class _RideAcceptedPageState extends State<RideAcceptedPage>
    with SingleTickerProviderStateMixin {
  final MapController _mapController = MapController();
  double _currentZoom = 15.0;

  List<LatLng> routePoints = [];
  String _eta = '';
  String _distance = '';
  LatLng? _driverLocation;
  late AnimationController _animationController;
  Animation<LatLng>? _locationAnimation;
  Timer? _animationTimer;

  bool _isAnimationControllerReady = false; // Flag to track controller readiness
  bool _isRouteReady = false; // Flag to track if the route is ready

  @override
  void initState() {
    super.initState();

    _driverLocation = widget.driverLocation;

    // Initialize the AnimationController
    _animationController = AnimationController(
      vsync: this,
      duration: Duration(seconds: 2),
    )..addListener(() {
        if (_isAnimationControllerReady) {
          setState(() {
            _driverLocation = _locationAnimation?.value;
          });
        }
      });

    // Mark the controller as ready
    _isAnimationControllerReady = true;

    // Fetch the route after initializing the AnimationController
    _fetchRoute();
  }

  void _startRide() {
    // Ensure AnimationController is initialized and route is available
    if (!_isAnimationControllerReady) {
      print('AnimationController is not ready yet.');
      return;
    }

    if (!_isRouteReady) {
      print('Route is not ready.');
      return;
    }

    int currentIndex = 0;

    // Timer to update the driver's position every 2 seconds
    _animationTimer = Timer.periodic(Duration(seconds: 2), (timer) {
      if (currentIndex < routePoints.length - 1) {
        final startPoint = routePoints[currentIndex];
        final endPoint = routePoints[currentIndex + 1];

        // Setup the LatLngTween animation
        _locationAnimation = LatLngTween(
          begin: startPoint,
          end: endPoint,
        ).animate(_animationController);

        // Reset and start the animation
        _animationController.reset();
        _animationController.forward();

        // Update the current index
        currentIndex++;
      } else {
        // If the destination is reached, stop the animation
        timer.cancel();
        print('Driver reached user location.');
      }
    });
  }

  @override
  void dispose() {
    _animationController.dispose();
    _animationTimer?.cancel();
    super.dispose();
  }

  Future<void> _fetchRoute() async {
    final osrmUrl =
        'http://router.project-osrm.org/route/v1/driving/${_driverLocation!.longitude},${_driverLocation!.latitude};${widget.userLocation.longitude},${widget.userLocation.latitude}?overview=full&geometries=polyline';

    try {
      final response = await http.get(Uri.parse(osrmUrl));
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final polyline = data['routes'][0]['geometry'];
        final distanceInMeters = data['routes'][0]['distance'];
        final durationInSeconds = data['routes'][0]['duration'];

        final distanceInKilometers = distanceInMeters / 1000;
        final durationInMinutes = (durationInSeconds / 60).floor();
        final durationInSecs = (durationInSeconds % 60).floor();

        setState(() {
          _distance = distanceInKilometers.toStringAsFixed(2);
          _eta =
              '$durationInMinutes min ${durationInSecs.toString().padLeft(2, '0')} sec';
          routePoints = _decodePolyline(polyline);
          _isRouteReady = true; // Mark the route as ready
        });

        // Start the ride once the route is ready
        if (_isRouteReady) {
          _startRide();
        }
      } else {
        print('Failed to fetch route: ${response.body}');
      }
    } catch (e) {
      print('Error fetching route: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_driverLocation == null) {
      return Center(child: CircularProgressIndicator());
    }

    return Scaffold(
      appBar: AppBar(
        title: Text('Ride Accepted'),
      ),
      body: Stack(
        children: [
          FlutterMap(
            mapController: _mapController,
            options: MapOptions(
              initialCenter: _driverLocation!,
              initialZoom: _currentZoom,
            ),
            children: [
              TileLayer(
                urlTemplate: "https://tile.openstreetmap.org/{z}/{x}/{y}.png",
              ),
              MarkerLayer(
                markers: [
                  Marker(
                    width: 50.0,
                    height: 50.0,
                    point: _driverLocation!,
                    child: Icon(
                      Icons.local_taxi,
                      color: Colors.green,
                      size: 40.0,
                    ),
                  ),
                  Marker(
                    width: 50.0,
                    height: 50.0,
                    point: widget.userLocation,
                    child: Icon(
                      Icons.person_pin_circle,
                      color: Colors.red,
                      size: 40.0,
                    ),
                  ),
                ],
              ),
              PolylineLayer(
                polylines: [
                  if (_driverLocation != null) // Only show polyline if the driver is moving
                    Polyline(
                      points: routePoints,
                      strokeWidth: 4.0,
                      color: Colors.blue,
                    ),
                ],
              ),
            ],
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              padding: EdgeInsets.all(16.0),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.vertical(top: Radius.circular(20.0)),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black26,
                    blurRadius: 10.0,
                    offset: Offset(0, -3),
                  ),
                ],
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    'User Details',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  SizedBox(height: 10),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      CircleAvatar(
                        radius: 30,
                        backgroundImage: NetworkImage(
                          'https://via.placeholder.com/150', // Replace with actual user image URL
                        ),
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'John Doe', // Replace with actual user name
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                          SizedBox(height: 5),
                          Row(
                            children: [
                              Icon(Icons.star, color: Colors.amber, size: 16),
                              SizedBox(width: 2),
                              Text('4.8 (120 Reviews)'), // Replace with actual rating
                            ],
                          ),
                          SizedBox(height: 5),
                          Text(
                            'Distance: $_distance km', // Display the dynamically fetched distance
                            style: TextStyle(fontSize: 14, color: Colors.grey),
                          ),
                          SizedBox(height: 5),
                          Text(
                            'ETA: $_eta', // Display the dynamically calculated ETA
                            style: TextStyle(fontSize: 14, color: Colors.grey),
                          ),
                        ],
                      ),
                      IconButton(
                        icon: Icon(Icons.call, color: Colors.green, size: 30),
                        onPressed: () {
                          // Implement call functionality
                          print('Calling user...');
                        },
                      ),
                    ],
                  ),
                  SizedBox(height: 10),
                  ElevatedButton(
                    onPressed: _startRide,
                    child: Text('Start Ride'),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  List<LatLng> _decodePolyline(String encoded) {
    List<LatLng> points = [];
    int index = 0, len = encoded.length;
    int lat = 0, lng = 0;

    while (index < len) {
      int b, shift = 0, result = 0;
      do {
        b = encoded.codeUnitAt(index++) - 63;
        result |= (b & 0x1f) << shift;
        shift += 5;
      } while (b >= 0x20);
      int dlat = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
      lat += dlat;

      shift = 0;
      result = 0;
      do {
        b = encoded.codeUnitAt(index++) - 63;
        result |= (b & 0x1f) << shift;
        shift += 5;
      } while (b >= 0x20);
      int dlng = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
      lng += dlng;

      points.add(LatLng(lat / 1E5, lng / 1E5));
    }
    return points;
  }
}
