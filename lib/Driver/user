import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:geolocator/geolocator.dart';
import 'package:http/http.dart' as http;
import 'package:latlong2/latlong.dart';

class RideAcceptedPage extends StatefulWidget {
  final LatLng driverLocation; // Add the driverLocation parameter
  final LatLng userLocation;

  // Constructor for RideAcceptedPage
  RideAcceptedPage({
    required this.driverLocation, // Initialize driverLocation
    required this.userLocation,   // Initialize userLocation
  });

  @override
  _RideAcceptedPageState createState() => _RideAcceptedPageState();
}

class _RideAcceptedPageState extends State<RideAcceptedPage> {
  final MapController _mapController = MapController();
  double _currentZoom = 15.0;

  List<LatLng> routePoints = []; // For storing the route polyline
  String _eta = ''; // State variable to store the estimated time of arrival
  String _distance = ''; // State variable to store the distance between driver and user
  LatLng? _driverLocation; // Will store the driver's current location

  @override
  void initState() {
    super.initState();
    _getDriverLocation(); // Get the initial driver location
    _fetchRoute(); // Fetch the route
    _startLocationTracking(); // Start tracking the driver's location periodically
  }

  // Function to fetch the current location of the driver using geolocator
  Future<void> _getDriverLocation() async {
    bool serviceEnabled;
    LocationPermission permission;

    // Check if location services are enabled
    serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      // If location services are not enabled, return early
      print("Location services are disabled.");
      return;
    }

    // Check location permission
    permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        // If permission is denied, return early
        print("Location permission denied.");
        return;
      }
    }

    // Get current position (driver's location)
    Position position = await Geolocator.getCurrentPosition(
      desiredAccuracy: LocationAccuracy.high,
    );

    setState(() {
      _driverLocation = LatLng(position.latitude, position.longitude); // Update the driver's location
    });
  }

  // Periodically update the driver's location every 5 seconds
  void _startLocationTracking() {
    // Update the driver's location every 5 seconds
    Future.delayed(Duration(seconds: 5), () async {
      await _getDriverLocation();
      _fetchRoute(); // Fetch the route again after location update
      _startLocationTracking(); // Keep tracking the location
    });
  }

  // Fetch route and ETA details between the driver and the user
  Future<void> _fetchRoute() async {
    if (_driverLocation == null) {
      return; // Wait for the driver location to be fetched
    }

    final osrmUrl =
        'http://router.project-osrm.org/route/v1/driving/${_driverLocation!.longitude},${_driverLocation!.latitude};${widget.userLocation.longitude},${widget.userLocation.latitude}?overview=full&geometries=polyline';

    try {
      final response = await http.get(Uri.parse(osrmUrl));
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final polyline = data['routes'][0]['geometry']; // Encoded polyline
        final distanceInMeters = data['routes'][0]['distance']; // Distance in meters
        final durationInSeconds = data['routes'][0]['duration']; // Duration in seconds

        // Convert distance to kilometers and format it
        final distanceInKilometers = distanceInMeters / 1000;
        final durationInMinutes = (durationInSeconds / 60).floor();
        final durationInSecs = (durationInSeconds % 60).floor();

        setState(() {
          _distance = distanceInKilometers.toStringAsFixed(2); // 2 decimal places
          _eta = '$durationInMinutes min ${durationInSecs.toString().padLeft(2, '0')} sec'; // Calculate ETA
        });

        routePoints = _decodePolyline(polyline);
      } else {
        print('Failed to fetch route: ${response.body}');
      }
    } catch (e) {
      print('Error fetching route: $e');
    }
  }

  List<LatLng> _decodePolyline(String encoded) {
    List<LatLng> points = [];
    int index = 0, len = encoded.length;
    int lat = 0, lng = 0;

    while (index < len) {
      int b, shift = 0, result = 0;
      do {
        b = encoded.codeUnitAt(index++) - 63;
        result |= (b & 0x1f) << shift;
        shift += 5;
      } while (b >= 0x20);
      int dlat = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
      lat += dlat;

      shift = 0;
      result = 0;
      do {
        b = encoded.codeUnitAt(index++) - 63;
        result |= (b & 0x1f) << shift;
        shift += 5;
      } while (b >= 0x20);
      int dlng = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
      lng += dlng;

      points.add(LatLng(lat / 1E5, lng / 1E5));
    }

    return points;
  }

  void _startRide() {
    // Implement the start ride functionality here
    print('Ride started...');
  }

  @override
  Widget build(BuildContext context) {
    if (_driverLocation == null) {
      return Center(child: CircularProgressIndicator()); // Show loading until driver location is fetched
    }

    return Scaffold(
      appBar: AppBar(
        title: Text('Ride Accepted'),
      ),
      body: Stack(
        children: [
          FlutterMap(
            mapController: _mapController,
            options: MapOptions(
              initialCenter: _driverLocation!,
              initialZoom: _currentZoom,
            ),
            children: [
              TileLayer(
              urlTemplate: "https://tile.openstreetmap.org/{z}/{x}/{y}.png",
            ),

              MarkerLayer(
                markers: [
                  Marker(
                    width: 50.0,
                    height: 50.0,
                    point: _driverLocation!,
                    child: Icon(
                      Icons.local_taxi,
                      color: Colors.green,
                      size: 40.0,
                    ),
                  ),
                  Marker(
                    width: 50.0,
                    height: 50.0,
                    point: widget.userLocation,
                    child: Icon(
                      Icons.person_pin_circle,
                      color: Colors.red,
                      size: 40.0,
                    ),
                  ),
                ],
              ),
              PolylineLayer(
                polylines: [
                  Polyline(
                    points: routePoints,
                    strokeWidth: 4.0,
                    color: Colors.blue,
                  ),
                ],
              ),
            ],
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              padding: EdgeInsets.all(16.0),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.vertical(top: Radius.circular(20.0)),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black26,
                    blurRadius: 10.0,
                    offset: Offset(0, -3),
                  ),
                ],
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    'User Details',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  SizedBox(height: 10),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      CircleAvatar(
                        radius: 30,
                        backgroundImage: NetworkImage(
                          'https://via.placeholder.com/150', // Replace with actual user image URL
                        ),
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'John Doe', // Replace with actual user name
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                          SizedBox(height: 5),
                          Row(
                            children: [
                              Icon(Icons.star, color: Colors.amber, size: 16),
                              SizedBox(width: 2),
                              Text('4.8 (120 Reviews)'), // Replace with actual rating
                            ],
                          ),
                          SizedBox(height: 5),
                          Text(
                            'Distance: $_distance km', // Display the dynamically fetched distance
                            style: TextStyle(fontSize: 14, color: Colors.grey),
                          ),
                          SizedBox(height: 5),
                          Text(
                            'ETA: $_eta', // Display the dynamically calculated ETA
                            style: TextStyle(fontSize: 14, color: Colors.grey),
                          ),
                        ],
                      ),
                      IconButton(
                        icon: Icon(Icons.call, color: Colors.green, size: 30),
                        onPressed: () {
                          // Implement call functionality
                          print('Calling user...');
                        },
                      ),
                    ],
                  ),
                  SizedBox(height: 10),
                  ElevatedButton(
                    onPressed: _startRide,
                    child: Text('Start Ride'),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}
